#!/bin/bash
#
# nwt-index
# Index the the sound recordings at jw.org of
# the New World Translation of the Holy Scriptures
#

show_help()
{
    cat<<EOF
Index the bible sound recordings at jw.org and make playlists

Usage: nwt-index [options] [DIRECTORY]
  --lang CODE   Change language
  --list-langs  Show a list of available language codes
  --silver	Use the 2013 edition of the NWT
  --download    Make recordings available offline
  DIRECTORY     Directory to save the playlists in
EOF
    exit
}

# Read the formated json file on stdin
# write mp3 files to playlists
# and download and parse new books
#
# GIGANT CAVEATS:
# - "pubName" must be first, because it erases the playlist
# - "title" must be followed by "booknum" or by "stream"
# - "pubName" must be the same as the parent books "title"
#     or else the link to the file and the actual file
#     will be different.
#
parse_lines()
{
    # Create directory
    if [[ ! -e $savedir ]]; then
	mkdir -p "$savedir" || error "$savedir: Failed to create directory"
    fi
    
    # Read stdin
    # Use -r because we want to keep the backslashes a bit longer
    while read -r input; do
	# Unescape
	input="$(printf '%b' "$input")"
	# Remove backslashes
	input="${input//\\/}"

	case "$input" in
	    pubName:*)
		name="${input#*:}"
		# Message, so we can see progress
		echo "$name" 1>&2
                # Save the "file" variable
                file="$savedir/$name.m3u"
		# Start on an empty playlist
		echo "#EXTM3U" > "$file"
		;;

	    title:*)
		title="${input#*:}"
		;;

	    booknum:*)
		newbook="${input#*:}"
		# Only create links to books if our book is the "index"
		# and the link don't point to the index itself.
		if [[ $book = 0 && ! $newbook = 0 ]]; then
		    # (If a subdir is set, add it before filename)
		    print_to_file "$title" "${subsavedir:+$subsavedir/}$title.m3u" "$file"
		    # Index the new book
		    # (If a subdir i set, append it to destination dir)
		    ("$0" --book "$newbook" "$savedir${subsavedir:+/$subsavedir}")
		fi
		;;

	    url:*.mp3)
		url="${input#*:}"
		print_to_file "$title" "$url" "$file"
		;;

	esac
    done
}

# Download the language list and make it readable
# CAVEATS
# - "name" must be the first variable in the language list
lang_list()
{
    echo "Languages:"
    # 1. Download the list
    # 2. Replace commas with newlines
    # 3. Replace "CODE":{"name":"LANG" with CODE:LANG
    # 4. Sort it
    # 5. Make a nice list with columns
    download_file "$langurl" \
        | sed 's/,/\n/g' \
        | sed -n 's/.*"\([^"]*\)":{"name":"\([^"]*\)"/\1:\2/p' \
        | sort \
        | column -t -s :
    exit
}

# Load shared code
[[ $SHARED ]] || SHARED="shared-functions.sh"
if [[ -f $SHARED ]]; then
    source $SHARED
else
    cat<<EOF 1>&2
Cannot find the shared code at $SHARED
You can set the default path with the variable SHARED
EOF
    exit 1
fi  

read_arguments --help:show_help \
	       --lang=lang \
	       --list-langs:lang=none \
	       --book=book \
	       --silver:bible=nwt \
	       --download:download=1 \
	       -- \
	       "$@"

export lang book bible
[[ ${#arguments[@]} -gt 1 ]] && error "Too many arguments"

# Assign variables
[[ $book ]] || book=0
[[ $bible ]] || bible=bi12
[[ $lang ]] || lang=E
[[ $download ]] || download=0
[[ $savedir ]] || savedir="${arguments[0]:-.}"
langurl="www.jw.org/apps/TRGCHlZRQVNYVrXF?output=json&pub=$bible&fileformat=MP3&alllangs=1&langwritten=E&txtCMSLang=E&booknum=0"
mainurl="http://www.jw.org/apps/TRGCHlZRQVNYVrXF?booknum=$book&output=json&pub=$bible&fileformat=MP3&alllangs=0&langwritten=$lang&txtCMSLang=$lang"

# Check that lang is valid
check_lang "$lang" "$langurl" "\"$lang\":{\"name\":" || lang_list

# Only the parent process has a subdir
if [[ $book = 0 ]]; then
    subsavedir="$bible-$lang"
else
    unset subsavedir
fi

# Download and parse the JSON file
download_file "$mainurl" \
    | unsquash_file pubName title booknum url \
    | parse_lines || error

