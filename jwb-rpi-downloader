#!/bin/bash
#
# jwb-rpi-downloader
# Download videos from tv.jw.org to be used with jwb-rpi
#

load_shared_code()
{
    for code in "$SHARED" ./shared-functions /usr/local/lib/jw-scripts/shared-functions; do
	if [[ -f $code ]]; then
	    if source "$code"; then
		return 0
	    else
		echo "error when reading shared functions" 1>&2
		exit 1
	    fi
	fi
    done

    echo "Cannot find shared functions file" 1>&2
    echo "You can set the default path with the variable SHARED" 1>&2
    exit 1
}

load_shared_code

show_help()
{
    cat<<EOF
Usage: jwb-rpi-downloader [OPTIONS] [DIR]
Download videos from tv.jw.org to be played by the jwb-rpi script.

Options:
  --category CODENAMES   Comma-separated list of categories to prioritize
  --checksum             Verify integrity of video files (default)
  --config FILE          Custom configuration file
  --daemon	         Download latest videos with regular intervals
  --free-space PCT       Percentage of disk space to keep free
  --import DIR           Import videos from another jwb-rpi directory
  --lang CODE            Set language
  --limit-rate RATE      Download rate for videos, 0 disables limit
  --no-checksum          Don't verify integrity of video files
  --no-subsubtitles      Prefer unsubtitled videos
  --only-latest          Only download the latest videos
  --prio-percent PCT     Percentage of space reserved for prioritized videos
  --quality NUM          Maximum quality: 240, 360, 480 or 720
  --since DATE           Only save videos newer than DATE
  --subtitles            Prefer subtitled videos (default)
  --update-timeout TIME  Time between looking for new videos online
  DIRECTORY              Directory to save data in (can be copied and imported)

Without --daemon, download all videos from prioritized categories.

If DATE is "auto", the date the last import was done is used.

EOF
    exit
}

# Read from stdin and add line to files
# Args: [--prio]
add_to_list()
{
    # Add line if file exists and line is unique
    while read -r; do
	[[ -z $REPLY ]] && continue
	name="$(basename "$REPLY")"
	file="$dir_videos/$name"
	[[ -e $file ]] && ! grep "^$name$" "$list_videos" &>/dev/null && echo "$name" >> "$list_videos"
	[[ $1 = --prio ]] && ! grep -q "^$name$" "$list_prio" &>/dev/null && echo "$name" >> "$list_prio"
    done
}

disk_usage_limitor()
{
    local size_total size_prio size_latest

    disk_usage="$(df --output=pcent "$dir_videos" | grep -o '[0-9]\+')" || err "failed to get used disk space" || return 1
    [[ $disk_usage -lt $((100 - free_percent)) ]] && return 0
    
    msg "disk space low (${disk_usage}% used)"
    
    # Let prioritized videos be? ... see download_videos()
    local skip_prio=0	
    if [[ $prio_percent && $prio_categories && -e $list_prio ]]; then
	# Size of all videos
	size_total="$(du --bytes --summarize "$dir_videos" | grep -o '[0-9]\+')" || err "failed to get total size of all videos"
        # Size of prioritized videos
        size_prio="$(cd "$dir_videos" && tr '\n' '\0' < "$list_prio" \
			| du --bytes --total --files0-from - 2>/dev/null \
                        | tail -n1 \
                        | grep -o '[0-9]\+')" \
	    || err "failed to get total size of prioritized videos"
	
	if [[ $size_total && $size_prio ]]; then
	    msg "(prio: ${size_prio}B, other: $((size_total-size_prio))B)"
	    # If prio videos are below limit, let them be alone!
	    [[ $size_prio -lt $((max_size*prio_percent/100)) ]] && skip_prio=1
	fi
    fi
    
    # Print file list sorted by time (oldest first)
    local name
    ls --escape --sort=time --reverse -1 "$dir_videos" | while read -r name; do
	
	local file="$dir_videos/$name"
	
	# Skip deleted file markers or currently downloading files
	[[ $file =~ \.(part|deleted)$ ]] && continue
	
	# Skip non-files (but there shouldn't be any)
        [[ ! -f $file ]] && continue
	
        # Skip prio videos? Check if prioritized.
        ((skip_prio)) && grep -q "^$name$" "$list_prio" && continue
	
	# Skip currently playing video
	[[ -e $list_now_playing ]] && grep -q "^$name$" "$list_now_playing" && continue
	
        # Remove file from disk and lists
	msg "removing $file"
        rm -f "$file" || continue
	remove_from_lists "$name" "$list_prio" "$list_videos"
	
	# Mark it as "don't download again"
	touch "$file.deleted"
	
	# Re-check disk usage
	break
    done

    return 0
}

download_videos()
{
    local prio_flags

    # Wait for internet connection
    netmsg=0
    until ping -c 3 tv.jw.org &>/dev/null; do
	((netmsg)) || msg "waiting for internet connection before starting download"
	netmsg=1
	sleep 1m
    done
    
    if ((daemon)); then
	prio_flags+=(--quiet)
	prio_flags+=(--no-checksum)
	prio_flags+=(--limit-rate=0)
    else
	prio_flags+=(--download)
    fi

    [[ $prio_categories ]] && prio_flags+=(--category="$prio_categories")
    
    # Only update the WHOLE index of (prio) videos once a day
    if [[ $latest != 1 || -z $last_updated || $(date +%s) -gt $(( last_updated + 86400 )) ]]; then

	last_updated="$(date +%s)"
	msg "checking all prioritized videos online"
	
	# Print videos from prio categories to list_prio (optionally download them)
	# The stdbuf thing is so status messages gets printed out in realtime
	"$jwb_script" \
	    --mode=urllist \
	    --timestamp \
	    "${prio_flags[@]}" \
	    "$dir_videos" \
	    2> >(stdbuf -oL sed 's/^/jwb-index: /' 1>&2) \
	    | add_to_list ${prio_categories:+--prio}
    fi

    msg "checking latest videos online"
    
    # Download latest videos
    "$jwb_script" \
	--mode=urllist \
	--download \
	--latest \
	--timestamp \
	"$dir_videos" \
	2> >(stdbuf -oL sed '/LatestVideos/d; s/^/jwb-index: /' 1>&2) \
	| add_to_list

    return 0
}

import_videos()
{
    # Merge the prio videos lists
    if [[ $import/prio.list ]]; then
	sort --unique "$import/prio.list" "$list_prio" > "$list_prio.new"
	mv -f "$list_prio.new" "$list_prio"
    fi

    # Copy videos, add to list, and show progress
    msg "importing videos:"
    for file in "$import/videos/"*; do
	[[ -e $dir_videos/$(basename "$file") ]] && continue
	cp -a "$file" "$dir_videos" && echo "$file" | tee /dev/stderr
    done | add_to_list

    # Timestamp for this import
    LANG=C date > "$list_import_date"
}



### LOAD SETTINGS AND PARSE ARGUMENTS

unset daemon latest
export checksum subtitles

read_arguments --help:show_help \
	       --category=prio_categories \
	       --checksum:checksum=1 \
	       --config=conf \
	       --daemon:daemon=1 \
	       --free-space=free_percent \
	       --import=import \
	       --lang=lang \
	       --limit-rate=limit_rate \
	       --no-checksum:checksum=0 \
	       --no-subtitles:subtitles=0 \
	       --only-latest:latest=1 \
	       --prio-percent=prio_percent \
	       --quality=quality \
	       --since=since \
	       --subtitles:subtitles=1 \
	       --update-timeout=update_timeout \
	       -- "$@" || exit 1

[[ ${#arguments[@]} -gt 1 ]] && msg "too many arguments" && exit 1
dir="${arguments[0]}"

requirement_check sed realpath

load_settings jwb-rpi "$conf" \
	      checksums=1 \
	      dir=~/JWB \
	      free_percent=10 \
	      jwb_script=jwb-index \
	      lang=E \
	      limit_rate=1M \
	      prio_categories= \
	      prio_percent=75 \
	      quality=480 \
	      subtitles=1 \
	      update_timeout=3h \
	      since= \
    || exit 1

# jwb_script must be absolute path or start with ./
jwb_script="$(type -p "$jwb_script")" || jwb_script=./jwb-index

requirement_check "$jwb_script"

# Make dir path absolute
dir="$(realpath --canonicalize-missing "$dir")"
dir_videos="$dir/videos"
list_now_playing="$dir/now_playing"
list_import_date="$dir/last_imported"
list_prio="$dir/prio.list"
list_videos="$dir/videos.list"



#### BEGIN SCRIPT

# Kill subprocesses when exiting
trap 'echo aborted 1>&2; exit 1' SIGHUP SIGTERM SIGINT
trap 'trap - SIGTERM; kill 0' EXIT

# Create video dir
[[ -e "$dir_videos" ]] || mkdir -p "$dir_videos" || crash

# Date since last import
if [[ $since = auto ]]; then
    if [[ -e $list_import_date ]]; then
        since="$(< "$list_import_date")" || crash
	date -d "$since" '+downloading videos since %x' 1>&2 || exit 1
    else
	msg "warning: no date since last import was found"
	unset since
    fi
fi


# Remove old videos when dirs get full (background)
if [[ $free_percent -gt 0 ]]; then
    while sleep 1s; do
	disk_usage_limitor || msg "disk usage monitor failed" || break
    done & pid_list+=$!
fi

# Import videos (background)
if [[ $import ]]; then

    [[ ! -d $import ]] && msg "directory does not exist" && exit 1
    [[ ! -d $import/videos ]] && msg "the directory to import should contain ./videos/" && exit 1
    [[ $import/videos/* = "$import/videos/*" ]] && msg "no videos to import" && exit 1

    import_videos & pid_list+=$!

# Download videos (background)
else
    while :; do  
	
	download_videos
	
	((daemon)) || msg "download complete" || break
	
	sleep $update_timeout || break
	
    done & pid_list+=$!
fi

# Exit when the first child process finishes
wait -n ${pid_list[@]}
