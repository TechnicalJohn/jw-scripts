#!/usr/bin/env python3
import argparse
import os
import shutil
from sys import stderr

from jwlib.arguments import disk_usage_info, add_arguments
from jwlib.parse import delete_oldest


class File:
    def __init__(self, source, dest):
        self.source = source
        self.dest = dest
        self.exists = os.path.exists(source)
        if self.exists:
            s = os.stat(source)
            self.size = s.st_size
            self.time = s.st_mtime


parser = argparse.ArgumentParser(prog='jwb-import',
                                 usage='%(prog)s SOURCE DEST ',
                                 description='Import new videos from SOURCE')
add_arguments(parser, ['--free', '--no-warning', '--quiet'])
parser.add_argument('--percent',
                    action='store_true',
                    help='output progress in percent to stdout (for piping)')
parser.add_argument('source',
                    metavar='SOURCE',
                    help='source directory')
parser.add_argument('dest',
                    metavar='DEST',
                    help='destination directory')
args = parser.parse_args()

if not os.path.isdir(args.dest):
    os.makedirs(args.dest)

if args.keep_free > 0:
    args.keep_free = args.keep_free * 1024 ** 2  # MiB to B
    disk_usage_info(args.dest, args.keep_free, args.warn, args.quiet)

# Create a list with source and destination file objects
files = []
for name in os.listdir(args.source):
    if not name.lower().endswith('.mp4'):
        continue
    f = File(os.path.join(args.source, name), os.path.join(args.dest, name))
    if not f.exists:
        continue
    if os.path.exists(f.dest + '.deleted'):
        continue
    if os.path.exists(f.dest) and f.size == os.stat(f.dest).st_size:
        continue
    files.append(f)

# Sort by newest file first
files = sorted(files, key=lambda x: x.time, reverse=True)

total = len(files)
for f in files:
    i = files.index(f)
    if args.percent:
        print(i*100//total)

    # Clean up until there is enough space
    while args.keep_free > 0:
        space = shutil.disk_usage(args.dest).free
        needed = f.size + args.keep_free
        if space > needed:
            break
        if args.quiet < 1:
            print('free space: {:} MiB, needed: {:} MiB'.format(space // 1024**2, needed // 1024**2), file=stderr)
        delete_oldest(args.dest, f.time, args.quiet)

    # Copy file
    if args.quiet < 1:
        print('copying [{}/{}]: {}'.format(i+1, total, os.path.basename(f.source)), file=stderr)
    shutil.copy2(f.source, f.dest)

if args.percent:
    print(100)
if args.quiet < 1:
    print('done', file=stderr)