#!/bin/bash
#
# jwb-index
# Index JW Broadcasting (tv.jw.org)
#

show_help()
{
    cat<<EOF
Index the videos at tv.jw.org and make m3u playlists

Usage: jwb-index [options] [DIRECTORY]
  --lang CODE   Select language code
  --list-langs  Show a list of available language codes
  --res QUALITY Choose between 240, 360, 480 and 720
  --no-subs	Prefer unsubtitled videos
  DIRECTORY     Directory to save the playlists in
EOF
    exit
}

# Read the formated JSON file on stdin
# write videos to playlists
# and download and parse new categories
#
# GIGANT CAVEATS:
# - "key" must be followed by "name"
# - "title" must come before "progressiveDownloadURL"
#
parse_lines()
{
    file="$savedir/$category.m3u"

    # Create directory
    if [[ ! -e $savedir ]]; then
	mkdir -p "$savedir" || error "$savedir: Failed to create directory"
    fi

    # Start on an empty playlist
    echo "#EXTM3U" > "$file" || error "Failed to write to playlist"

    # Read stdin
    while read -r input; do
	case "$input" in
	    key:*)
		key="${input#*:}"
		;;

	    # A new category - parse it
	    name:*)
		name="${input#*:}"
		# Skip categories we've already checked
		grep -q "$key" "$histfile" && continue
		
		# Print a link to the new playlist
		# (if we have a subdir, add it)
		print_to_file "${name^^*}" "${subsavedir:+$subsavedir/}$key.m3u" "$file"
		
		# Start a new instance - download and parse category
		# (if we have a subdir, append it to destination)
		("$0" --child --category "$key" "${savedir}${subsavedir:+/$subsavedir}") || error # exit if child process gets error
		;;

	    # A new clip - save the old one
	    title:*)
		# If there is a title an URL, print them
		if [[ $title && $url ]]; then
		    print_to_file "$title" "$url" "$file"
		    # Unset title and URL so they don't get repeated
		    unset title url
		fi

		# Save the new title
		title="${input#*:}"
		;;

	    # An URL - is it better than previous?
	    progressiveDownloadURL:*)
		if [[ $url ]]; then
		    
		    # Prefer subtitles or not
		    if ((subtitles)); then
			# Old one have subs and new one doesn't
			[[ $url = *_s-Sub_* && ${input#*:} != *_s-Sub_* ]] && continue
		    else
			# Old one doesn't have subs and new one has
			[[ $url != *_s-Sub_* && ${input#*:} = *_s-Sub_* ]] && continue
		    fi
		    
		    # Compare quality (old < new <= maximum)
		    n="$(sed 's/^.*r\([0-9]\)*P.mp4$/\1/'<<< "${input#*:}")" # new quality
		    o="$(sed 's/^.*r\([0-9]\)*P.mp4$/\1/' <<< "$url")" # old quality
		    [[ $n -lt $o || $n -gt $quality ]] && continue
		    
		fi
		# Save URL
		url="${input#*:}"
		;;

	esac
    done

    # If there is a title and an URL left when we reach EOF
    # save them to the playlist
    if [[ $title && $url ]]; then
	print_to_file "$title" "$url" "$file"
    fi
}

# Download the language list and make it readable
# CAVEATS:
# - "name" must be followed by "code"
lang_list()
{
    echo "Languages:"
    # 1. Download the list
    # 2. Make newline at every opening bracket
    #    where a new language starts
    # 3. Replace "name":"LANG" ... "code":"CODE"
    #    with LANG CODE
    # 4. Sort it
    # 5. Make a nice list with columns
    download_file "$langurl" \
        | sed 's/{/\n/g' \
        | sed -n 's/.*"name":"\([^"]*\)".*"code":"\([^"]*\)".*/\2:\1/p' \
        | sort \
        | column -t -s :
   exit
}

# Load shared code
[[ $SHARED ]] || SHARED="shared-functions.sh"
if [[ -f $SHARED ]]; then
    source $SHARED
else
    cat<<EOF 1>&2
Cannot find the shared code at $SHARED
You can set the default path with the variable SHARED
EOF
    exit 1
fi  

requirement_check

read_arguments --help:show_help\
	       --list-langs:lang=none \
	       --lang=lang \
	       --category=category \
	       --res=quality \
	       --child:child=1\
	       --no-subs:subtitles=0 \
	       --latest:category=LatestVideos \
	       -- \
	       "$@" || exit 1

export lang category subtitles quality
[[ ${#arguments[@]} -gt 1 ]] && error "Too many arguments" # $arguments gets set by read_arguments()

# Assign variables
[[ $subtitles ]] || subtitles=1
[[ $child ]] || child=0
[[ $category ]] || category=VideoOnDemand
[[ $quality ]] || quality=480
[[ $lang ]] || lang=E
[[ $savedir ]] || savedir="${arguments[0]:-.}"
histfile="/tmp/.jwb-index.history"
langurl="http://mediator.jw.org/v1/languages/E/web"
mainurl="http://mediator.jw.org/v1/categories/$lang/${category}?detailed=1"

# Check that lang is valid
check_lang "$lang" "$langurl" "\"code\":\"$lang\"" || lang_list

# Parent/child process stuff
if ((child)); then
    # Childs have no subdirs
    unset subsavedir
else
    # Parent saves into subdirs
    subsavedir="jwb-$lang"
    # The parent process removes the history file when it exits
    trap '[[ -e $histfile ]] && rm "$histfile"; exit' SIGINT SIGTERM SIGHUP EXIT
fi

# Write to the history file
# and show a message with our progress at the same time
echo "$category" | tee -a "$histfile" 1>&2 || error

# Download and parse the JSON file
download_file "$mainurl" \
    | unsquash_file key name title progressiveDownloadURL \
    | parse_lines || error

