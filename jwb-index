#!/bin/bash
#
# jwb-index
# Index JW Broadcasting (tv.jw.org)
#

load_shared_code()
{
    for code in "$SHARED" ./shared-functions /usr/local/lib/jw-scripts/shared-functions; do
	if [[ -f $code ]]; then
	    if source "$code"; then
		break
	    else
		echo "Failed to load shared functions" 1&>2
		exit 1
	    fi
	fi
    done

    if [[ $? != 0 ]]; then
	echo "Cannot find shared functions file" 1>&2
	echo "You can set the default path with the variable SHARED" 1>&2
	exit 1
    fi
}

show_help()
{
    cat<<EOF
Index the videos at tv.jw.org and make m3u playlists

Usage: jwb-index [options] [DIRECTORY]
  --lang CODE           Change language
  --list-langs          Show a list of available language codes
  --quality NUM         Select maximum quality: 240, 360, 480 or 720
  --no-subs             Prefer unsubtitled videos
  --latest              Index "Latest Videos" instead of "Video on Demand"
  --download            Make videos available offline
  --filesystem          Organize videos in directories
  --plex		Plex compatibility (--download, --filesystem)
  --clean               Clean out all old files exept downloaded videos
  DIRECTORY             Directory to save the playlists or videos in
Advanced options:
  --limit-rate RATE     Maximum download rate for videos. Default is
                        500k (500 kilobytes per second). Zero disables
                        the limit. But, somebody THINK OF THE SERVERS! :)
  --category CODENAME   JSON file to download. Default: VideoOnDemand
  --no-recursive        Don't automatically download more categories
  --json                Don't parse the JSON file, just show it (debug)
EOF
    exit
}

# Read the formated JSON file on stdin
# write videos to playlists
# and download and parse new categories
#
# GIGANT CAVEATS:
# - "key" must be followed by "name"
# - "title" must come before "progressiveDownloadURL"
#
parse_lines()
{
    # Create empty dir and playlist
    initialize_dir "$datadir" "$maincode"

    # Read stdin
    while read -r input; do
        case "$input" in

            key:*)
                code="${input#*:}"
                ;;

            parentCategory:)
                # Next name refers to parent category, don't parse it
                skipnextname=1
                ;;

            primaryCategory:*)
                realcode="${input#*:}"
                ;;

            name:*)
                name="${input#*:}"

                ((skipnextname)) && skipnextname=0 && continue

                # First process, first category (self)
                # Create a link for easy access to first playlist/dir
                if [[ $code = "$maincode" ]]; then
		    ! ((child)) && create_index_file_link "$maincode" "$name" "$datadir"
                    # If code = self, don't parse any more
                    continue
                fi

                write_subdir "${name^^*}" "$code" "$datadir" "$maincode"

                # Don't download categories we've already checked
                grep -q "$code" "$histfile" && continue

                # Start a new instance - download and parse category
                if ! ((norecursive)); then
                    ("$0" --child --category "$code" "$datadir") || error "Child process failed" # exit if child process gets error
                fi
                ;;

            title:*)
                # If there is a title an URL, save them
                if [[ $title && $url ]]; then
                    write_media "$title" "$url" "$datadir" "$maincode"
                    # Unset title and URL so they don't get repeated
                    unset title url
                fi

                title="${input#*:}"
                ;;

            progressiveDownloadURL:*.mp4)
                newurl="${input#*:}"
                # Already have url? Compare them!
                if [[ $url ]]; then

                    # Prefer subtitles or not
                    if ((nosubtitles)); then
                        # Old one doesn't have subs and new one has
                        [[ $url != *_s-Sub_* && $newurl = *_s-Sub_* ]] && continue
                    else
                        # Old one have subs and new one doesn't
                        [[ $url = *_s-Sub_* && $newurl != *_s-Sub_* ]] && continue
                    fi

                    # Compare quality (old < new <= maximum)
                    newq="$(sed 's/^.*r\([0-9]*\)P\.mp4$/\1/i'<<< "$newurl")" || error "Quality comparsion failed"
                    oldq="$(sed 's/^.*r\([0-9]*\)P\.mp4$/\1/i' <<< "$url")" || error "Quality comparsion failed"
                    [[ $newq -lt $oldq || $newq -gt $quality ]] && continue

                fi
                # Save URL
                url="$newurl"
                ;;

        esac
    done

    # If there is a title and an URL left when we reach EOF
    # save them to the playlist
    [[ $title && $url ]] && write_media "$title" "$url" "$datadir" "$maincode"

    return 0
}

# Download the language list and make it readable
# CAVEATS:
# - "name" must be followed by "code"
lang_list()
{
    echo "Languages:"
    # 1. Download the list
    # 2. Make newline at every opening bracket
    #    where a new language starts
    # 3. Replace "name":"LANG" ... "code":"CODE"
    #    with LANG CODE
    # 4. Sort it
    # 5. Make a nice list with columns
    download_file "$langurl" \
        | sed 's/{/\n/g' \
        | sed -n 's/.*"name":"\([^"]*\)".*"code":"\([^"]*\)".*/\2:\1/p' \
        | sort \
        | column -t -s :

    exit
}

load_shared_code

read_arguments --help:show_help\
               --list-langs:lang=none \
               --lang=lang \
               --category=maincode \
               --quality=quality \
               --child:child=1\
               --no-subs:nosubtitles=1 \
               --latest:maincode=LatestVideos \
               --download:download=1 \
               --no-recursive:norecursive=1 \
               --json:json=1 \
               --filesystem:filesystem=1 \
	       --limit-rate=maxrate \
	       --clean:clean=1 \
               -- \
               "$@" || exit 1

export lang maincode nosubtitles quality download norecursive maxrate filesystem child
[[ ${#arguments[@]} -gt 1 ]] && error "Too many arguments" # $arguments gets set by read_arguments()

# Assign variables
[[ $maxrate ]] || maxrate=500k
[[ $maincode ]] || maincode=VideoOnDemand
[[ $quality ]] || quality=720
[[ $lang ]] || lang=E
[[ $datadir ]] || datadir="${arguments[0]:-.}"
[[ $maxrate = 0 ]] && unset maxrate
histfile="/tmp/.jwb-index.history"
langurl="http://mediator.jw.org/v1/languages/E/web"
mainurl="http://mediator.jw.org/v1/categories/$lang/${maincode}?detailed=1"

# Things that only the parent may do
# or that's only needed once
if ! ((child)); then
    # Do we have all we need?
    requirement_check
    # Check that lang is valid
    check_lang "$lang" "$langurl" "\"code\":\"$lang\"" || lang_list
    # Check datadir and make absolute
    if [[ -d $datadir ]]; then
	datadir="$(realpath "$datadir")"
    else
	error "$datadir: Destination directory does not exist"
    fi
    # Add a subdir
    datadir="$datadir/jwb-$lang"
    # Cleaning
    ((clean)) && clean_dir "$datadir"
    # Remove the history file when we exit
    trap '[[ -e $histfile ]] && rm "$histfile"; exit' SIGINT SIGTERM SIGHUP EXIT
fi

# Write to the history file
# and show a message with our progress at the same time
echo "$maincode" | tee -a "$histfile" 1>&2 || error "Failed to write to history file"

# Debug JSON
if ((json)); then
    download_file "$mainurl" | unsquash_file | less
    exit
fi

# Download and parse the JSON file
download_file "$mainurl" \
    | unsquash_file key name title progressiveDownloadURL parentCategory \
    | parse_lines


