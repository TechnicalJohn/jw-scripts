#!/bin/bash
#
# jwb-rpi
#
# Hi there!
# Please don't screw up these options by setting them to invalid values.
# This script isn't written in a way that will check for, or correct misstakes,
# and I take no responsibility if your computer catches on fire or kittens die.
# /Alex

###########
# Options #
###########


# Read trough the options, then comment this out
unconfigured=1


# Path to the jwb-index script
# (No need to change if installed system wide)
jwb_script=jwb-index

# Path to shared-functions for jwb-index
# (Only need to be set if not installed system wide)
#export SHARED=

# Language code (see jwb-index --lang)
lang=E

# Directory to save videos and related stuff in
dir=~/JWB

# Maximum quality of videos
# Quality = MB/h +/- 20MB
# The more motion in the video the bigger file.
# Available values: 240, 360, 480, 720
quality=480

# Maximum size limit of video directory
# Set this lower then the available disk space, since check is only
# done every 30 seconds.
# When limit is exceeded, old videos will be deleted.
max_size=25G

# Time between checking for videos online
update_timeout=3h

# Regular download speed; and when using --firsttime
# 0 disables limit
# k = kilobyte/s
# M = megabyte/s
limit_rate=1M
limit_rate_first_time=4M

# Don't check video files --firsttime
# Use this if you have a slow computer, like the Pi v1
#no_checksum=1

# Extra options for omxplayer
# Raise volume
#omx_options+=(--vol 600)
# Tweak image position (x,y,x,y)
#omx_options+=(--win 0,0,720,576)
#omx_options+=(--aspect-mode letterbox)

# Workaround for HTTPS cert bug in Debian
# which causes downloads of videos to fail
# (ca-certificates 20141019+deb8u1)
#export hascurl=0

# Categories of videos to keep longer (see the output of jwb-index)
# These categories should be the ones you prefer to watch - and to give your
# PRECIOUS disk space!
# You can leave this empty if you don't care
keep_categories=(VODStudio VODProgramsEvents VODIntExp VODOriginalSongs)

# Size reserved for "latest" videos
# When old videos get deleted, videos in keep_categories will usually be
# kept, and OTHER videos deleted. But when the OTHER videos drops below
# this threshold, videos in keep_categories get deleted too.
min_size_latest=5G

##################
# End of options #
##################


error()
{
    echo "$*" 1>&2
    exit 1
}

show_help()
{
    cat<<EOF
Usage: jwb-rpi [--firsttime]
Download videos from tv.jw.org and play randomly forever

  --firsttime   Download all videos from the selected categories
                not just the latest ones, then exit

You will have to edit this script and tweak the configuration
to your liking, then comment out "unconfigured=1" before you
can run it.
EOF
    exit
}

# INTEGER[b|k|M|G|T]
computer_readable()
{
    # Convert units to numbers
    [[ $1 =~ ^[0-9]+(\.[0-9]+)?(b|k|M|G|T)$ ]] || error "$1: invalid size"
    echo "$(( $(sed 's/b//; s/k/*1024/; s/M/*1024**2/; s/G/*1024**3/; s/T/*1024**4/;' <<< "$1") ))"
}

dir_monitor()
{
    # Loop until size is OK
    while sleep 1s; do

        # Break if size is below limit
        size_total="$(du -s "$dir_videos" | egrep -o '^[0-9]+')"
        [[ $size_total -lt $max_size ]] && break

	# Include "keep" videos (see below)
	skipkeep=0
	
        if [[ $keep_categories && -e $list_keep ]]; then
            # Get total size of all "keep" videos
            size_keep="$(xargs -rd '\n' du -s < "$list_keep" \
                           | egrep -o '^[0-9]+' \
                           | while read; do n="$((n+REPLY))"; echo "$n"; done \
                           | tail -n 1)"
            
            size_latest="$(( size_total - size_keep ))"

	    # If "latest" videos are too big, skip "keep" videos
	    [[ $size_latest -gt $min_size_latest ]] && skipkeep=1
        else
	    skipkeep=1
	fi

	# Print reversed file list sorted by size (biggest first)
        ls -1cr "$dir_videos" | while read file; do

	    # Skip non-files (but there shouldn't be any)
            [[ ! -f $file ]] && continue
	    
            # Skip "keep" videos
            ((skipkeep)) && grep -q "^$file$" "$list_keep" && continue

            # Remove file from disk and list
            rm -fv "$file" && remove_from_lists "$file"
        done

    done
}

download_videos()
{
    if ((first_time)); then
	keep_flags+=(--download)
	if ((no_checksum)); then
	    latest_flags+=(--no-checksum)
	    keep_flags+=(--no-checksum)
	fi
    else
	keep_flags=(--quiet)
	latest_flags=(--quiet)
    fi
    
   # Print videos from "keep" categories to list_keep (optionally download them)
    for c in "${keep_categories[@]}"; do
        "$jwb_script" \
	    --category "$c" \
	    --lang "$lang" \
	    --quality "$quality" \
	    --mode=urllist \
	    --limit-rate="$limit_rate" \
	    "${keep_flags[@]}" \
	    "$dir_videos"
    done | add_to_list "$list_keep" "$list_videos"

    # Download latest videos
    "$jwb_script" \
	--lang "$lang" \
	--quality "$quality" \
	--latest \
	--download \
	--mode=urllist \
	--limit-rate="$limit_rate" \
	"${latest_flags[@]}" \
	"$dir_videos" \
	| add_to_list "$list_videos"

    ((first_time)) && echo "download complete" 1>&2
}

# FILE
add_to_list()
{
    # Add a line to file if it's not already there
    while read -r; do
	for list in "$@"; do
	    file="$(basename "$REPLY")"
            [[ -e $list ]] && grep -q "^$file$" "$list" || echo "$file" >> "$list"
	done
    done
}

# FILE
remove_from_lists()
{
    # Remove a line from the files
    for list in "$list_videos" "$list_history"; do
	[[ ! -e $list ]] && continue
	sed -i "/^$(basename "$1")$/d" "$list"
    done
}

get_video()
{
    [[ -s $list_videos ]] || return 1

    # Get random videos
    shuf "$list_videos" | while read vid; do
        # Skip empty
        [[ -z $vid ]] && continue
        # Skip non-existing
        if [[ ! -e "$dir_videos/$vid" ]]; then
            remove_from_lists "$vid"
            continue
        fi
        # Skip recently played
        [[ -e $list_history ]] && grep -q "^$vid$" "$list_history" && continue
        # Print it and exit
        printf '%s' "$dir_videos/$vid"
	return 0
    done

    return 1
}

save_pos()
{
    if [[ $video && $pos_start ]]; then
	printf "%s\n" "$video" "$(( $(date +%s) - pos_start ))" > "$list_now_playing"
    fi
}

play_video()
{
    if [[ -e $list_videos && -e $list_history ]]; then
	# Only keep 75% of videos in the history
	# Do this first so we never get stuck in next step
	tail -n $(( $(wc -l < "$list_videos") * 3/4 )) "$list_history" > "$list_history.new"
	mv "$list_history.new" "$list_history"
    fi
    
    # Get new video
    [[ $video ]] || video="$(get_video)"

    # No videos? Show message
    if [[ -z $video ]]; then
        ((vidmsg)) || echo "no videos to play yet" 1>&2
	vidmsg=1
        sleep 10s
	continue
    fi

    # Play video
    pos_start="$(date +%s)"

    ######################################################
    # If you want to change the video player, look here! #
    # $pos = seconds to skip                             #
    ######################################################

    omxplayer --pos "${pos:-0}" "${omx_options[@]}" "$video" &>/dev/null
    
    # Add video to history
    add_to_list "$list_history" <<< "$video"
    
    # Forget video and position so we don't replay it next loop
    unset video pos pos_start
}

# Help?
((unconfigured)) || [[ $1 = --help ]] && show_help

# Is jwb-index installed?
type "$jwb_script" &>/dev/null || { echo "$jwb_script not in path" 1>&2; exit 1; }

# Save play position and kill subprocesses when exiting
trap 'save_pos; trap - SIGTERM; kill 0; exit' SIGHUP SIGTERM SIGINT EXIT

# Default values
[[ $jwb_script ]] || jwb_script=jwb-index
[[ $lang ]] || lang=E
[[ $dir ]] || dir=~/JWB
[[ $quality ]] || quality=480
[[ $max_size ]] || max_size=25G
[[ $update_timeout ]] || update_timeout=3h
[[ $limit_rate ]] || limit_rate=1M
[[ $limit_rate_fist_time ]] || limit_rate_first_time=4M
[[ $min_size_latest ]] || min_size_latest=5G

first_time=0
dir="$(realpath "$dir")"
dir_videos="$dir/videos"
list_now_playing="$dir/now_playing"

# Note: These three lists should only contain
# basenames of files, separated by newlines
list_history="$dir/history.list"
list_keep="$dir/keep.list"
list_videos="$dir/videos.list"

# Convert size units to bytes
max_size="$(computer_readable "$max_size")"
min_size_latest="$(computer_readable "$min_size_latest")"

# Arguments?
if [[ $1 = --firsttime ]]; then
    first_time=1
    limit_rate=$limit_rate_first_time
elif [[ $1 ]]; then
    error "$1: unknown argument"
fi

# Create dir
[[ ! -e "$dir_videos" ]] && mkdir -p "$dir_videos"

# Download videos (background)
while :; do
    # Don't download anything until time is set right
    # (Raspberry Pi fix)
    [[ $(date +%Y) = 1970 ]] && sleep 1m && continue
    download_videos
    ((first_time)) && break
    sleep $update_timeout || break
done & dlpid=$!

# Remove old videos when dirs get full (background)
while sleep 30s; do
    dir_monitor
done & monitorpid=$!

# Get last playing video and its position
if [[ -s "$list_now_playing" ]]; then
    read -d '' video pos < "$list_now_playing" # returns an error but works
    rm -f "$list_now_playing"
    # Back up 30 sec
    pos=$((pos-30))
    [[ $pos -lt 0 ]] && pos=0
fi

# Play videos forever (background)
while sleep 1s; do
    play_video
done & playerpid=$!

# Wait here until something finished
if ((first_time)); then
    wait $dlpid
else
    wait $playerpid
fi
