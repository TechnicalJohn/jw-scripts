#!/usr/bin/env python3

import time
import os
import argparse
import signal
import subprocess
import json
from random import shuffle


class VideoManager:
    def __init__(self, wd):
        """

        :param wd: Working directory
        """
        self.video = None
        self.start_time = None
        self.pos = 0
        self.history = []
        self.dump_file = os.path.join(wd, 'dump.json')
        self.wd = wd
        self.cmd = ['omxplayer', '--pos', '{}']

    def write_dump(self):
        """Dump data to JSON file"""
        d = {'video': self.video,
             'pos': self.calculate_pos(),
             'history': self.history}
        with open(self.dump_file, 'w') as output_file:
            output_file.write(json.dumps(d))

    def read_dump(self):
        """Load data from JSON file"""
        if os.path.exists(self.dump_file):
            with open(self.dump_file, 'r') as input_file:
                d = json.loads(input_file.read())
            if 'history' in d and type(d['history']) is list:
                self.history = d['history']
            if 'video' in d and type(d['video']) is str:
                self.video = d['video']
            if 'pos' in d and type(d['pos']) is int:
                self.pos = d['pos']

    def set_random_video(self):
        """Get a random video from working directory"""
        if self.video:
            self.start_time = time.time()
            return True
        files = self.list_videos()
        shuffle(files)
        for vid in files:
            if vid in self.history:
                continue
            self.video = vid
            self.pos = 0
            self.start_time = time.time()
            return True
        return False

    def calculate_pos(self):
        """Calculate the playback position in the currently playing video"""
        if self.start_time:
            # Back up 30 sec
            p = int(time.time() - self.start_time + self.pos - 30)
            if p < 0:
                p = 0
            return p
        else:
            return 0

    def play_video(self):
        """Play a video"""
        self.write_dump()
        print('playing ' + self.video)
        cmd = [arg.replace('{}', str(self.pos)) for arg in self.cmd] + [os.path.join(self.wd, self.video)]
        subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        self.add_to_history(self.video)
        self.video = None

    def add_to_history(self, video):
        """Add a video to the history and trim it to half of the amount of videos"""
        max_len = len(self.list_videos()) // 2
        self.history.append(video)
        self.history = self.history[-max_len:]

    def list_videos(self):
        """Return a list of all MP4 files in working dir"""
        v = [f for f in os.listdir(self.wd) if f.endswith('.mp4') if os.path.isfile(os.path.join(self.wd, f))]
        return v


def handler(signal, frame):
    raise KeyboardInterrupt

signal.signal(signal.SIGTERM, handler)


parser = argparse.ArgumentParser(prog='jwb-rpi',
                                 usage='%(prog)s [DIR] [COMMAND]',
                                 description='Shuffle and play videos in DIR')
parser.add_argument('dir',
                    metavar='DIR',
                    default='.')
parser.add_argument('cmd',
                    nargs=argparse.REMAINDER,
                    metavar='COMMAND',
                    help='video player command, "{}" gets replaced by starting position in secs')
args = parser.parse_args()

m = VideoManager(args.dir)
if len(args.cmd) > 0:
    m.cmd = args.cmd

try:
    m.read_dump()
except json.decoder.JSONDecodeError:
    pass

showmsg = True
try:
    while True:
        if m.set_random_video():
            m.play_video()
            showmsg = True
        else:
            if showmsg:
                print('no videos to play yet')
                showmsg = False
            time.sleep(10)
            continue
except KeyboardInterrupt:
    print('aborted')
    m.write_dump()
