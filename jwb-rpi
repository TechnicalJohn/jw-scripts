#!/bin/bash
#
# jwb-rpi
#
# Hi there!
# Please don't screw up these options by doing some funny stuff like putting
# letters where there shouldn't be, or using newlines in names (and try to avoid
# spaces too), or leaving options empty. This script isn't written in a way that
# will check for, or correct misstakes, and I take no responsibility if your
# computer catches on fire or kittens die.
# /Alex

###########
# Options #
###########

# If you want to change the video player, look at the end of the script!

# Path to the jwb-index script
# (No need to change if installed system wide)
jwb_script=jwb-index

# Path to shared-functions for jwb-index
# (Only need to be set if not installed system wide, and not located in working dir)
#export SHARED=

# Language code (see jwb-index --lang)
lang=E

# Directory to save videos and related stuff in
# DON'T SAVE OTHER THINGS HERE, as they risk being deleted automatically
dir=~/JWB

# Maximum quality of videos
# The size in MB per hour is approximaly the same as the quality +/- 20MB.
# The more motion in the video the bigger file.
# Available qualities: 240, 360, 480, 720
quality=480

# Maximum size limit of video directory
# When the limit is reached, old videos will start to be deleted. Note that this
# is no hard limit, and WILL be exceeded since the size is only checked every
# size_timeout seconds
max_size=25G

# Time between the size checks
size_timeout=30s

# Time between checking for videos online
update_timeout=3h

# Regular download speed; and when using --firsttime
# 0 disables limit
# k = kilobyte/s
# M = megabyte/s
limit_rate=1M
limit_rate_first_time=4M

#################################################################
# The following options has no effect until max_size is reached #
#################################################################

# Categories of videos to keep longer (see the output of jwb-index)
# These categories should be the ones you prefer to watch - and to give your
# PRECIOUS disk space!
# You can leave this empty if you don't care
keep_categories=(VODStudio VODProgramsEvents VODIntExp VODOriginalSongs)

# Size reserved for "latest" videos
# These are the videos that aren't in keep_categories.
# They are the first to be deleted when max_size is exceeded.
# But when their size drops below min_size_latest the deletion process will
# start to affect ALL videos. If keep_categories is empty, this has no effect
min_size_latest=5G

# Message strings (translate them if you want)
no_network_msg="Seems to be no network connection, cannot download videos"
no_videos_msg="Please wait while videos are downloading"



# Now when you have read through these options, you can comment out the line
# below, and run the script
unconfigured=1


##################
# End of options #
##################


# MESSAGE
error()
{
    echo "$*" 1>&2
    exit 1
}

# MESSAGE
msg()
{
    #######################################
    # Put a figlet thing here if you want #
    #######################################
    
    echo "$*" 1>&2
}

show_help()
{
    cat<<EOF
Usage: jwb-rpi [--firsttime]
Download videos from tv.jw.org and play randomly forever

  --firsttime   Download all videos from the selected categories
                not just the latest ones

You will have to edit this script and tweak the configuration
to your liking, then comment out "unconfigured=1" before you
can run it.
EOF
    exit
}

# INTEGER[b|k|M|G|T]
computer_readable()
{
    # Convert units to numbers
    [[ $1 =~ ^[0-9]+(\.[0-9]+)?(b|k|M|G|T)$ ]] || error "$1: invalid size"
    echo "$(( $(sed 's/b//; s/k/*1024/; s/M/*1024**2/; s/G/*1024**3/; s/T/*1024**4/;' <<< "$1") ))"
}

dir_monitor()
{
    # Loop until size is OK
    while sleep 1s; do

        # Break if size is below limit
        size_total="$(du -s "$dir_videos" | egrep -o '^[0-9]+')"
        [[ $size_total -lt $max_size ]] && break

	# Include "keep" videos (see below)
	skipkeep=0
	
        if [[ $keep_categories && -e $list_keep ]]; then
            # Get total size of all "keep" videos
            size_keep="$(xargs -rd '\n' du -s < "$list_keep" \
                           | egrep -o '^[0-9]+' \
                           | while read; do n="$((n+REPLY))"; echo "$n"; done \
                           | tail -n 1)"
            
            size_latest="$(( size_total - size_keep ))"

	    # If "latest" videos are too big, skip "keep" videos
	    [[ $size_latest -gt $min_size_latest ]] && skipkeep=1
        else
	    skipkeep=1
	fi

	# Print reversed file list sorted by size (biggest first)
        ls -1cr "$dir_videos" | while read file; do

	    # Skip non-files (but there shouldn't be any)
            [[ ! -f $file ]] && continue
	    
            # Skip "keep" videos
            ((skipkeep)) && grep -q "^$file$" "$list_keep" && continue

            # Remove file from disk and list
            rm -fv "$file" && remove_from_lists "$file"
        done

    done
}

download_videos()
{
   # Print videos from "keep" categories to list_keep (optionally download them)
    for c in "${keep_categories[@]}"; do
        "$jwb_script" \
	    --category "$c" \
	    --lang "$lang" \
	    --quality "$quality" \
	    --mode=urllist \
	    ${first_time:+--download} \
	    --limit-rate="$limit_rate" \
	    --quiet \
	    "$dir_videos"
    done | add_to_list "$list_keep" "$list_videos"

    # Download latest videos
    "$jwb_script" \
	--lang "$lang" \
	--quality "$quality" \
	--latest \
	--download \
	--mode=urllist \
	--limit-rate="$limit_rate" \
	--quiet \
	"$dir_videos" \
	| add_to_list "$list_videos"
}

# FILE
add_to_list()
{
    # Add a line to file if it's not already there
    while read -r; do
	for list in "$@"; do
	    file="$(basename "$REPLY")"
            [[ -e $list ]] && grep -q "^$file$" "$list" || echo "$file" >> "$list"
	done
    done
}

# FILE
remove_from_lists()
{
    # Remove a line from the files
    for list in "$list_videos" "$list_history"; do
	[[ ! -e $list ]] && continue
	sed -i "/^$(basename "$1")$/d" "$list"
    done
}

get_video()
{
    [[ -s $list_videos ]] || return 1

    # Get random videos
    shuf "$list_videos" | while read vid; do
        # Skip empty
        [[ -z $vid ]] && continue
        # Skip non-existing
        if [[ ! -e "$dir_videos/$vid" ]]; then
            remove_from_lists "$vid"
            continue
        fi
        # Skip recently played
        [[ -e $list_history ]] && grep -q "^$vid$" "$list_history" && continue
        # Print it and exit
        printf '%s' "$dir_videos/$vid"
	return 0
    done

    return 1
}

save_pos()
{
    if [[ $video && $pos_start ]]; then
	printf "%s\n" "$video" "$(( $(date +%s) - pos_start ))" > "$list_now_playing"
    fi
}

((unconfigured)) && show_help

type "$jwb_script" &>/dev/null || { echo "$jwb_script not in path"; exit 1; }

# Save play position and kill subprocesses when exiting
trap 'save_pos; trap - SIGTERM; kill 0; exit' SIGHUP SIGTERM SIGINT EXIT

first_time=0
case "$1" in
    --help)
        show_help
    ;;
    --firsttime)
        first_time=1
	limit_rate=$limit_rate_first_time
    ;;
esac

dir="$(realpath "$dir")"
dir_videos="$dir/videos"
list_now_playing="$dir/now_playing"
# These lists should only contain basenames of files, separated by newline
list_history="$dir/history.list"
list_keep="$dir/keep.list"
list_videos="$dir/videos.list"

# Convert size units to bytes
max_size="$(computer_readable "$max_size")"
min_size_latest="$(computer_readable "$min_size_latest")"

# Create dir
[[ ! -e "$dir_videos" ]] && mkdir -p "$dir_videos"

# Download videos (background)
while :; do
    download_videos 2>&1
    sleep $update_timeout || break # sleep at end, so download start immediately
done &

# Remove old videos when dirs get full (background)
while sleep $size_timeout; do
    dir_monitor
done &

# Load last playing video and position
if [[ -s "$list_now_playing" ]]; then
    read -d '' video pos < "$list_now_playing" # returns an error but works
    rm -f "$list_now_playing"
    # Back up 30 sec
    pos=$((pos-30))
    [[ $pos -lt 0 ]] && pos=0
fi

unset vidmsg netmsg

# Play videos forever
while sleep 1s; do

    if [[ -e $list_videos && -e $list_history ]]; then
	# Only keep 75% of videos in the history
	# Do this first so we never get stuck in next step
	tail -n $(( $(wc -l < "$list_videos") * 3/4 )) "$list_history" > "$list_history.new"
	mv "$list_history.new" "$list_history"
    fi
    
    # Get new video
    [[ $video ]] || video="$(get_video)"

    # No videos, network problems? Show message
    if [[ -z $video ]]; then
        if ping -c 3 tv.jw.org &>/dev/null; then
            ((vidmsg)) || msg "$no_videos_msg"
	    vidmsg=1 # don't show again
        else
            ((netmsg)) || msg "$no_network_msg"
	    netmsg=1 # don't show again
        fi
        sleep 10s
	continue # try again
    fi

    # Play video
    pos_start="$(date +%s)"

    ######################################################
    # If you want to change the video player, look here! #
    # $pos = seconds to skip                             #
    ######################################################

    omxplayer --pos "${pos:-0}" "$video" &>/dev/null
    
    # Add video to history
    add_to_list "$list_history" <<< "$video"
    
    # Forget video and position so we don't replay it next loop
    unset video pos pos_start
    
done
