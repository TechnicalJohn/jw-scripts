#!/bin/bash
#
# jwb-rpi
# Play videos downloaded by jwb-rpi-downloader
#

load_shared_code()
{
    for code in "$SHARED" ./shared-functions /usr/local/lib/jw-scripts/shared-functions; do
	if [[ -f $code ]]; then
	    if source "$code"; then
		return 0
	    else
		echo "error when reading shared functions" 1>&2
		exit 1
	    fi
	fi
    done

    echo "Cannot find shared functions file" 1>&2
    echo "You can set the default path with the variable SHARED" 1>&2
    exit 1
}

load_config()
{
    [[ $conf  && ! -f "$conf" ]] && error "$conf: file not found"
    [[ $conf ]] || conf=/etc/jwb-rpi.conf

    [[ -e "$conf" ]] && source "$conf" || error "$conf: failed to load configuration file"
}

show_help()
{
    cat<<EOF
Usage: jwb-rpi [CONFIG FILE]
Shuffle and play JW Broadcasting videos forever

  CONFIG FILE   Path to the configuration file, default: /etc/jwb-rpi.conf

EOF
    exit
}

get_video()
{
    [[ -s $list_videos ]] || return 1

    # Get random videos
    shuf "$list_videos" | while read -r name; do
        # Skip empty
        [[ -z $name ]] && continue
	video="$dir_videos/$name"
        # Skip non-existing
        if [[ ! -f "$video" ]]; then
            remove_from_lists "$name" "$list_keep" "$list_videos"
            continue
        fi
        # Skip recently played
        [[ -e $list_history ]] && grep -q "^$name$" "$list_history" && continue
        # Print it and exit
        printf '%s' "$video"
	return 0
    done

    return 1
}

save_pos()
{
    if [[ $video && $pos_start ]]; then
	printf "%s\n" "$(basename "$video")" "$(( $(date +%s) - pos_start ))" > "$list_now_playing"
    fi
}

# FILE SECONDS
video_player()
{
    exec omxplayer "${player_options[@]}" --pos "$2" "$1"
}

load_shared_code

read_arguments --help:show_help -- "$@"
conf="$arguments"
load_config

requirement_check sed realpath

# Extra commands
if type mediainfo &>/dev/null; then
    mediainfo=1
else
    msg "optionally install mediainfo to prevent the script from locking up if media player hangs"
fi

[[ $dir ]] || dir=~/JWB
dir="$(realpath --canonicalize-missing "$dir")"
dir_videos="$dir/videos"
list_now_playing="$dir/now_playing"
list_history="$dir/history.list"
list_keep="$dir/keep.list"
list_videos="$dir/videos.list"

# Kill subprocesses when exiting
trap 'echo aborted 1>&2; exit 1' SIGHUP SIGTERM SIGINT
trap 'trap - SIGTERM; save_pos; kill 0' EXIT

# Get last playing video and its position
if [[ -s "$list_now_playing" ]]; then
    read -rd '' video pos < "$list_now_playing" # returns an error but works
    # Check that videos exists
    video="$dir_videos/$video"
    [[ ! -f $video ]] && unset video
    # Back up 30 sec
    if [[ $pos =~ [0-9]+ ]]; then
	pos=$((pos-30))
	[[ $pos -lt 0 ]] && pos=0
    else
	unset pos
    fi
fi

# Play videos forever
while sleep 1s; do

    if [[ -e $list_videos && -e $list_history ]]; then
	# Only keep 75% of videos in the history
	# Do this first so we never get stuck in next step
	tail -n $(( $(wc -l < "$list_videos") * 3/4 )) "$list_history" > "$list_history.new"
	mv "$list_history.new" "$list_history"
    fi
    
    # Get new video
    [[ $video ]] || video="$(get_video)"

    # No videos? Show message
    if [[ -z $video ]]; then
        ((vidmsg)) || msg "no videos to play yet"
	vidmsg=1
        sleep 10s
	continue
    fi
    
    # Play video
    msg "playing $video"
    pos_start="$(date +%s)"
    video_player "$video" "${pos:-0}" &>/dev/null & vidpid=$!

    # Save video position every minute
    save_pos
    while sleep 1m; do
	save_pos
    done & pospid=$!
    
    # If we can get the lenght of the video, kill it when it has gone more than 1 min
    if ((mediainfo)); then
	if duration="$(mediainfo --output="General;%Duration%" "$video")"; then
	    if [[ $duration =~ ^[0-9]+$ ]]; then
		sleep $((duration/1000+60-pos)) & killpid=$!
	    fi
	fi
    fi
    
    wait -n $vidpid $killpid
    kill -SIGINT $vidpid $killpid $pospid &>/dev/null
    
    # Add video to history
    basename "$video" >> "$list_history"
    
    # Forget video and position so we don't replay it next loop
    unset video pos pos_start vidmsg

done

