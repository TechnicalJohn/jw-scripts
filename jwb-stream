#!/usr/bin/env python3
import time
import subprocess
import argparse

from jwlib.arguments import add_arguments
from jwlib.parse import JWBroadcasting


parser = argparse.ArgumentParser(prog='jwb-stream',
                                 usage='%(prog)s [options] COMMAND [ARGUMENTS]',
                                 description='Stream media from tv.jw.org')

add_arguments(parser, ['--lang',
                       '--quality',
                       '--subtitles',
                       '--no-subtitles'])
# TODO
# parser.add_argument('--config')
parser.add_argument('--channel',
                    dest='channel',
                    choices=['OurStudio', 'Children', 'Teenagers', 'Family', 'ProgramEvents', 'OurActivities',
                             'Ministry', 'OurOrganization', 'Bible', 'Movies', 'MusicVideo', 'IntExp'],
                    help='channel to stream')
parser.add_argument('cmd',
                    nargs=argparse.REMAINDER,
                    metavar='COMMAND',
                    help='video player command, "{}" gets replaced by starting position in secs')

jwb = JWBroadcasting()
# Default values, not set by JWBroadcasting
jwb.channel = 'OurStudio'
jwb.cmd = []
parser.parse_args(namespace=jwb)

jwb.streaming = True
jwb.quiet = 1
jwb.utc_offset = (-time.altzone // 60)
jwb.index_category = 'Streaming' + jwb.channel
cmd = jwb.cmd

if len(cmd) == 0:
    raise RuntimeError("Not enough arguments")

# Replace the occurrences of `{}` with `0` in the command
cmd_second = [arg.replace('{}', '0') for arg in cmd]

first = True
while True:

    result = jwb.parse()
    print(result)
    queue = [item.url for item in result[0].content]
    position = result[0].position

    if first:
        # Replace {} with starting position in command
        cmd_first = [arg.replace('{}', str(position)) for arg in cmd]
        # Run command with first URL as argument
        subprocess.check_call(cmd_first + [queue.pop(0)])
        first = False

    # Run command with all URLs as arguments
    subprocess.check_call(cmd_second + queue)
