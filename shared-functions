# -*- shell-script -*-
#
# functions for jw-scripts
#
# Variables that changes the behaviour:
# mode         Valid values: m3u, m3ucompat, filesystem
# download     If true download the media files
# child        If true we are subprocess (affects some things)
# hascurl      If true use curl, else use wget
# maxrate      Set download rate
# 

crash()
{
    msg "${BASH_SOURCE[1]}, line ${BASH_LINENO[0]}: ${*:-something went wrong}"
    exit 1
}

err()
{
    msg "${BASH_SOURCE[1]}, line ${BASH_LINENO[0]}: ${*:-something went wrong}"
}

msg()
{
    s=$?
    echo "$*" 1>&2
    return $s
}

# Remove everything but the media
clean_dir()
{
    local datadir="$1"

    [[ $datadir ]] || crash

    # If dir doesn't exist, it is clean, right?
    [[ ! -d "$datadir" ]] && return 0
    
    # Remove symlinks
    find "$datadir" -type l -delete
    # Remove playlists
    find "$datadir" -name "*.m3u" -delete
    # Remove HTML files
    find "$datadir" -name "*.html" -delete
    # Remove partially downloaded files
    find "$datadir" -name "*.part" -delete
    # Remove empty directories
    find "$datadir" -type d -exec rmdir --ignore-fail-on-non-empty {} +
    # Remove symlinks outside $datadir that point to $datadir
    find "$(dirname "$datadir")" -maxdepth 1 -lname "$datadir/*" -or -lname "$(basename "$datadir")/*" -delete

    return 0
}

# Make a link (but smarter)
# Args: DEST LINKNAME
create_link()
{
    local dest="$1"
    local link="$2"
    local linkdir; linkdir="$(dirname "$link")"

    [[ $dest && $link && $linkdir ]] || crash

    # Create dir if not there
    if [[ ! -d $linkdir ]]; then
	mkdir -p "$linkdir" || err || return 1
    fi
        
    # Does link exist?
    if [[ -L "$link" ]]; then
	# Is link destination same as we want?
	if [[ $(readlink "$link") = "$dest" ]]; then
	    return 0
	else
	    # If not, remove it
	    rm "$link" || err || return 1
	fi
    fi

    # Make the actual link
    # -r makes it relative to link location
    ln -sr "$dest" "$link" || err || return 1
}

# Extract the JSON "keys" (or whatever) KEYWORDS
# And remove the quotes around the key and its value
# No keyword will match all letters, numbers, underscore and dash
#
# Example:
#   unsquash_file animal
# Will match:
#   "animal":"dog"
#   "animal":50
#   "animal":null
# And output:
#  animal:dog
#  animal:50
#  animal:null
#
# TODO
# If the string contains anything like JSON code,
# this will create a depressing mess, therefore
# this whole parsing stuff should be done by something
# else that's supposed to parse JSON. Like Python.
#
# Args: [KEYWORDS ...]
unsquash_file()
{
    local regex
    regex="$(echo "${@:-[a-zA-Z0-9_-]+}" | tr " " "|")" || return 1
    grep -E -o '"('"$regex"')":("([^"]*(\\")*)*"|[0-9]*|null)' | sed 's/\([^\]\|^\)"\+/\1/g; s/\\\"/"/g' || err "failed to format JSON" || return 1
}

# Save link to other playlist/dir
# in current playlist/dir
# Args: NAME DESTCODE DATADIR CODE MAINNAME
write_subdir()
{
    local title="$1"
    local link="$2"
    local datadir="$3"
    local code="$4"
    local name="$5"
    
    [[ $title && $link && $datadir && $code && $name ]] || crash

    case "$mode" in
	filesystem)
	    # Create the directory to link to, before linking to it
	    if [[ ! -d $datadir/$link ]]; then
		mkdir -p "$datadir/$link" || err || return 1
	    fi

	    # First process saves outside datadir
            if ! ((child)); then
		create_link "$datadir/$link" "$(dirname "$datadir")/$name/$title" || return 1
	    else
		create_link "$datadir/$link" "$datadir/$code/$title" || return 1
	    fi
	    ;;
	m3u|html)
	    # First process saves playlist outside of datadir
	    if ! ((child)); then
		write_to_$mode "$title" "$link.$mode" "$(dirname "$datadir")/$name.$mode" || return 1
	    else
		write_to_$mode "$title" "$link.$mode" "$datadir/$code.$mode" || return 1
	    fi
	    ;;
	m3ucompat)
	    return 0
	    ;;
	urllist)
	    return 0
	    ;;
    esac
}

# Check a files integrity
# Args: FILE SIZE MD5
check_file()
{
    local file="$1"
    local size="$2"
    local checksum="$3"

    [[ $file ]] || crash

    # Check size
    if [[ $size =~ [0-9]+ && ! $(du --bytes "$file" | cut -f1) -eq $size ]]; then
	((quiet)) || msg "$file: incorrect file size"
	return 1
    fi
	
    # Check checksum
    if [[ $checksum =~ [0-9a-f]{32} ]] && ! echo "$checksum  $file" | md5sum -c --status; then
	((quiet)) || msg "$file: incorrect checksum"
	return 1
    fi

    return 0
}

# Save media in playlist/dir
# and optionally download them
# Args: TITLE LINK DATADIR CODE NAME [CHECKSUM] [SIZE] [TIME]
write_media()
{
    local title="$1"
    local link="$2"
    local file; file="$(basename "$link")"
    local datadir="$3"
    local code="$4"
    local name="$5"
    local destdir="$datadir"
    local checksum="$6"
    local size="$7"
    local time="$8"
    
    [[ $title && $link && $file && $datadir && $code && $name ]] || crash

    [[ $mode = urllist ]] && datadir="$(dirname "$datadir")"

    # Remove broken files
    if [[ -e $datadir/$file ]]; then
	check_file "$datadir/$file" "$size" "$checksum" || rm -fv "$datadir/$file" || err || return 1
    fi

    # Download file
    if ((download)) && [[ ! -e $datadir/$file ]]; then
	((quiet)) || msg "downloading: $file"
	download_file "$link" "$datadir/$file.part"
	# Check downloaded file
	if [[ -e $datadir/$file.part ]]; then
	    if check_file "$datadir/$file.part" "$size" "$checksum"; then
		mv "$datadir/$file.part" "$datadir/$file" || err || return 1
	    else
		rm -fv "$datadir/$file.part" || err || return 1
	    fi
	fi
    fi
    
    # Change timestamp
    if [[ $time && -e $datadir/$file ]]; then
	touch -d "$time" "$datadir/$file" || err
    fi
    
    # Change link to point to local media
    [[ -e $datadir/$file ]] && link="$file"
    
    case "$mode" in
	filesystem)
	    # First process saves outside of datadir
	    if ! ((child)); then
		destdir="$(dirname "$datadir")"
		code="$name"
	    fi

	    # Link to existing media
	    if [[ -e $datadir/$file ]]; then
		suffix="$(sed -n 's/.\+\.//p' <<< "$file")"
		create_link "$datadir/$file" "$destdir/$code/$title.$suffix" || return 1
	    else
		# Create a playlist with a URL and link to it
		reset_m3u "$datadir/$file.m3u" || return 1
		write_to_m3u "$title" "$link" "$datadir/$file.m3u" || return 1
		create_link "$datadir/$file.m3u" "$destdir/$code/$title.m3u" || return 1
	    fi
	    ;;
	m3u|html)
	    # First process saves playlist outside of datadir
	    if ! ((child)); then
		# Note: no need to make link relative to datadir, this is done in write_to_$mode
		write_to_$mode "$title" "$link" "$(dirname "$datadir")/$name.$mode" || return 1
	    else
		write_to_$mode "$title" "$link" "$datadir/$code.$mode" || return 1
	    fi
	    ;;
	m3ucompat)
	    # Note: no need to make link relative to datadir, this is done in write_to_m3u
	    # Note: $code is in filename, not only to sort bible books in order, but also
	    #       to avoid conflicts, as multiple categories can have the same name in
	    #       JW Broadcasting, e.g. Featured Videos
	    write_to_m3u "$title" "$link" "$(dirname "$datadir")/$code - $name.m3u" || return 1
	    ;;
	urllist)
	    if [[ -e $datadir/$file ]]; then
		echo "$datadir/$file"
	    else
		echo "$link"
	    fi
	    ;;
    esac
    
    return 0
}

# Args: DATADIR CODE NAME
write_empty()
{
    local dir="$1"
    local code="$2"
    local name="$3"
    local file

    [[ $dir && $code && $name ]] || crash

    case "$mode" in
	m3u|html)
	    # First process saves outside of datadir
	    if ! ((child)); then
		dir="$(dirname "$dir")"
		file="$name.$mode"
	    else
		file="$code.$mode"
	    fi
	    reset_$mode "$dir/$file" || return 1
	    ;;
	m3ucompat)
	    reset_m3u "$(dirname "$dir")/$code - $name.m3u" || return 1
	    ;;
	filesystem)
	    # Remove all links
	    [[ -e $dir/$code ]] && find "$dir/$code" -type l -delete
	    return 0
	    ;;
	urllist)
	    return 0
	    ;;
    esac
}

# Args: FILE
reset_m3u()
{
    local file="$1"
    local dir; dir="$(dirname "$1")"

    [[ $file && $dir ]] || crash
    
    [[ -d $dir ]] || mkdir -p "$dir" || err || return 1
    printf '%s\n' "#EXTM3U" > "$file" || err "$file: failed to write to playlist" || return 1
}

# Args: TITLE LINK FILE
write_to_m3u()
{
    local title="$1"
    local link="$2"
    local file="$3"

    [[ $title && $link && $file ]] || crash
        
    # Reset the file if empty
    if [[ ! -f $file ]]; then
	reset_m3u "$file" || return 1
    fi

    # Make links to local files relative to the playlist dir
    if [[ ! $link =~ ^https?:// ]]; then
	# --canonicalize-missing = don't care if file exists or not
	link="$(realpath --canonicalize-missing --relative-to="$(dirname "$file")" "$datadir/$link")"
	[[ $link ]] || err || return 1
    fi
    
    # If link already is written to file, skip it
    grep -q "^$link$" "$file" && return 0
    
    printf '%s\n' "#EXTINF:0,$title" "$link" >> "$file" || err "$file: failed to write to playlist" || return 1
}

# Args: TITLE LINK FILE
write_to_html()
{
    local title="$1"
    local link="$2"
    local file="$3"

    [[ $title && $link && $file ]] || crash
        
    # Reset the file if empty
    if [[ ! -f $file ]]; then
	reset_html "$file" || return 1
    fi

    # Make links to local files relative to the playlist dir
    if [[ ! $link =~ ^https?:// ]]; then
	# --canonicalize-missing = don't care if file exists or not
	link="$(realpath --canonicalize-missing --relative-to="$(dirname "$file")" "$datadir/$link")"
	[[ $link ]] || err || return 1
    fi

    [[ $link =~ .html$ ]] && local html_before="<h3>" html_after="</h3>"
    
    # If link already is written to file, skip it
    grep -q "^$link$" "$file" && return 0

    # Remove last line
    sed -i '$ d' "$file" || err "$file: failed to write to html file" || return 1

    printf '%s\n' "${html_before}<a href=\"$link\">$title</a><br><br>${html_after}" "</body></html>" >> "$file" || err "$file: failed to write to html file" || return 1
}

# Args: FILE
reset_html()
{
    local file="$1"
    local dir; dir="$(dirname "$1")"

    [[ $file && $dir ]] || crash
    
    [[ -d $dir ]] || mkdir -p "$dir" || err || return 1
    printf '%s\n' "<html><head><meta charset=\"utf-8\"/></head><body>" "</body></html>" > "$file" || err "$file: failed to write to html file" || return 1
}

# Download a file with curl or wget
# Args: URL [FILE]
download_file()
{
    local url="$1"
    local file="$2"
    local dir; dir="$(dirname "$file")"
    [[ $url ]] || crash

    if [[ $file ]]; then

	# Create dir
	if [[ ! -e $dir ]]; then
	    mkdir -p "$dir" || err || return 1
	fi
	
	# Continue the download
	if [[ -e $file ]]; then
	    ((quiet)) || msg "continuing on: $file"
	    curl_args+=(--continue-at -)
	    wget_args+=(--continue)
	fi

	# Limit rate only for file downloads
	if [[ $maxrate && $maxrate != 0 ]]; then
	    curl_args+=(--limit-rate "$r")
	    wget_args+=(--limit-rate "$r")
	fi
	
    else
	file="-"
    fi

    if ((hascurl)); then
        curl "${curl_args[@]}" --silent  -o "$file" "$url" || err "failed to download file" || return 1
    else
        wget "${wget_args[@]}" --quiet -O "$file" "$url" || err "failed to download file" || return 1
    fi
}

# Check that we have all we need
requirement_check()
{
    for cmd in "$@"; do
	case "$cmd" in

	    sed)
		type sed &>/dev/null || crash "this script requires GNU sed"
		sed --version | grep -q "GNU sed" || err "Warning:
This script is build for and tested only with GNU sed.
It looks like you are using a different version of sed,
so I cannot guarrantee that it will work.
Just saying :)
"
		;;

	    curl|wget)
		if [[ -z $hascurl ]]; then
		    if type curl &>/dev/null; then
			export hascurl=1
		    else
			type wget &>/dev/null || crash "this script requires curl or wget"
			export hascurl=0
		    fi
		fi
		;;

	    *)
		type "$cmd" &>/dev/null || crash "this script requires the \"$cmd\" command"
		;;
	    
	esac
    done

    return 0
}

# Read the arguments and save variables or do things
# Args: --flag=variable --flag:action -- arguments ...
read_arguments()
{
    until [[ $1 = -- ]]; do
        flags+=("$1")
        shift
        [[ $# = 0 ]] && crash
    done

    # Remove the --
    shift

    until [[ $# = 0 ]]; do
        for flag in "${flags[@]}"; do

            # -- means no more flags, only arguments    
            if [[ $1 = -- ]]; then
		shift
		arguments+=("$@")
		return 0
            fi

            # Normal flag
            if [[ $flag =~ --[a-zA-Z0-9-]+:.* && $1 = "${flag%%:*}" ]]; then
                # Run action
                eval "${flag#*:}"
                shift
                continue 2

            # Flag with argument, separated by =
            elif [[ $flag =~ --[a-zA-Z0-9-]+=.* && $1 = "${flag%%=*}"=* ]]; then
                # Check that we have the argument
                [[ ${1#*=} ]] || crash "${flag%%=*} requires an argument"
                # Save in variable
                eval "${flag#*=}"'="${1#*=}"'
                shift
                continue 2

            # Flag with argument, separated by space (and argument is not a flag)
            elif [[ $flag =~ --[a-zA-Z0-9-]+=.* && $1 = "${flag%%=*}" && $2 != --* ]]; then
                # Check that we have the argument
                [[ $2 ]] || crash "${flag%%=*} requires an argument"
                # Save in variable
                eval "${flag#*=}"'="$2"'
                shift 2
                continue 2

            # An argument, save in array
            elif [[ $1 != --* ]]; then
                arguments+=("$1")
                shift
                continue 2
            fi

        done

        # No matching flag
        crash "$1: unknown flag"

    done

    return 0
}

# Check that the language code is valid
# Args: LANGCODE
jwb_check_lang()
{
    [[ $1 ]] || crash
    local langurl="https://mediator.jw.org/v1/languages/E/web"
    
    [[ $1 = E || $NOCHECKLANG = 1 ]] && return 0
    # Don't make more checks
    export NOCHECKLANG=1

    # Try to find the language code in the text
    if download_file "$langurl" | grep -q "\"code\":\"$1\""; then
	return 0
    else
	# Download the language list and make it readable
	# CAVEATS:
	# - "name" must be followed by "code"
	echo "Languages:"
	# 1. Download the list
	# 2. Make newline at every opening bracket
	#    where a new language starts
	# 3. Replace "name":"LANG" ... "code":"CODE"
	#    with LANG CODE
	# 4. Sort it
	# 5. Make a nice list with columns
	download_file "$langurl" \
            | sed 's/{/\n/g' \
            | sed -n 's/.*"name":"\([^"]*\)".*"code":"\([^"]*\)".*/\2:\1/p' \
            | sort \
            | column -t -s :
	
	return 1
    fi
}

# Remove a line from files
# Args: FILE ...
remove_from_lists()
{
    local string="$1"
    shift
    
    [[ $string && "$*" ]] || crash
    
    for list in "$@"; do
	[[ ! -e $list ]] && continue
	# Remove a line from the files
	# (bash: escape all / in $string)
	sed -i "/^${string//\//\\/}$/d" "$list" || err
    done
}
